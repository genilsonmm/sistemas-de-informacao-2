package com.deliveryapp.controller;


import java.util.List;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.deliveryapp.model.Customer;
import com.deliveryapp.model.Response;
import com.deliveryapp.repository.CustomerRepository;

@RestController()
@RequestMapping("/api/customer")
public class CustomerController {
	
	public CustomerController() {
		
	}
	
	/*
	@GetMapping()
	public ResponseEntity<List<Customer>> obtemTodos() {
		return new ResponseEntity<List<Customer>>(LivroRepository.instance().todos(), HttpStatus.OK);
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Object> obterLivro(@PathVariable int id)
	{
		try
		{
			return new ResponseEntity<Object>(LivroRepository.instance().obterLivro(id), HttpStatus.OK);
		}
		catch (Exception e) {
			return new ResponseEntity<Object>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	*/
	
	@PostMapping()
	public ResponseEntity<Response<Customer>> cadastrar(@Valid @RequestBody Customer customer, BindingResult result) {					
		
		Response<Customer> response = new Response<Customer>();
		
		if(result.hasErrors())
		{
			for (ObjectError error : result.getAllErrors()) {
				String key = String.valueOf(response.getErrors().size() + 1); 
				response.getErrors().put(key, error.getDefaultMessage());
			}
			
			response.setStatus(HttpStatus.BAD_REQUEST.value());
			return ResponseEntity.badRequest().body(response);
		}
		
		CustomerRepository customerRepository = new CustomerRepository();
		customerRepository.add(customer);
		
		response.setData(customer);
		response.setStatus(HttpStatus.OK.value());
		
		return ResponseEntity.ok(response);
	}
	
	/*
	@PutMapping("/{id}")
	public ResponseEntity<Object> editar(@PathVariable int id, @RequestBody Customer livro)
	{
		try
		{
			Customer livroAtualizado = LivroRepository.instance().editar(id, livro);	
			return new ResponseEntity<Object>(livroAtualizado, HttpStatus.OK);
		}
		catch (Exception e) {
			return new ResponseEntity<Object>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	*/
	@DeleteMapping("/{id}")
	public ResponseEntity<Response<Integer>> delete(@PathVariable long id) {
		
		Response<Integer> response = new Response<Integer>();
		
		try
		{

			CustomerRepository customerRepository = new CustomerRepository();
			customerRepository.remove(id);
			
			response.setData(id);
			response.setStatus(HttpStatus.OK.value());
			
			return ResponseEntity.ok(response);
		}
		catch (Exception e) {
			response.setStatus(HttpStatus.BAD_REQUEST.value());
			return ResponseEntity.badRequest().body(response);
		}
	}
	
}
